{
  // указывает ESLint на то, что текущий файл конфигурации является точкой входа для настройки линтера
  // и не нужно искать другие конфигурационные файлы в родительских директориях.
  "root": true,
  // Указываем среды, в которых будет работать приложение для того, чтобы подтянуть соответствующие глобальные переменные.
  "env": {
    "browser": true,
    "node": true
  },
  // Указываем конфигурации, которые мы хотим расширить собственными правилами.
  "extends": [
    "plugin:@typescript-eslint/recommended",
    "plugin:react-hooks/recommended",
    "plugin:react/recommended",
    "plugin:@next/next/recommended"
  ],
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "ecmaVersion": "latest"
    // // Указываем, что в проекте используются ES-модули.
    // "sourceType": "module"
  },
  // Указываем плагины, которые добавляют специфичные правила, которые мы можем использовать в "rules".
  "plugins": ["react", "@next/next", "@typescript-eslint", "simple-import-sort"],
  "rules": {
    // Common rules

    "no-console": "warn",
    "no-undef": "error",
    "no-template-curly-in-string": "error",
    "no-multi-spaces": "error",
    "no-useless-concat": "error",
    "no-var": "error",
    "prefer-const": "error",
    "comma-spacing": ["error", { "before": false, "after": true }],
    // "max-len": ["error", { "code": 120 }],
    "max-params": ["error", { "max": 2 }],
    "simple-import-sort/imports": [
      "error",
      {
        "groups": [
          // Packages `react` related packages come first.
          ["^react", "^next", "^@?\\w"],
          // Internal packages.
          ["^(@|components)(/.*|$)"],
          // Side effect imports.
          ["^\\u0000"],
          // Parent imports. Put `..` last.
          ["^\\.\\.(?!/?$)", "^\\.\\./?$"],
          // Other relative imports. Put same-folder imports and `.` last.
          ["^\\./(?=.*/)(?!/?$)", "^\\.(?!/?$)", "^\\./?$"],
          // Style imports.
          ["\\.(scss|css)$", "^.+\\.?(styles)$"]
        ]
      }
    ],

    // React rules

    // "react/jsx-uses-react": "off",
    "react/react-in-jsx-scope": "off",
    "react/no-array-index-key": "error",
    "react/jsx-curly-brace-presence": ["error", { "props": "never", "children": "never" }],
    "react/prop-types": "off",
    "react/no-unused-prop-types": 1,
    "react/no-unused-state": 1,
    "react/prefer-stateless-function": "error",
    "react/self-closing-comp": ["error", { "component": true, "html": true }],
    "react/void-dom-elements-no-children": "error",

    // ПРОДОЛЖИТЬ ОТСЮДА

    // TypeScript rules

    "@typescript-eslint/explicit-module-boundary-types": "off",
    "@typescript-eslint/no-useless-empty-export": "error",
    "@typescript-eslint/type-annotation-spacing": "error",
    "@typescript-eslint/consistent-type-imports": [
      "error",
      {
        "prefer": "type-imports"
      }
    ],
    "@typescript-eslint/no-use-before-define": [
      "error",
      {
        "functions": false,
        "classes": false,
        "variables": false
      }
    ],

    // A matter of preference

    "prefer-arrow-callback": "error",
    "arrow-parens": ["error", "as-needed"],
    "no-restricted-imports": [
      "error",
      {
        "patterns": [
          {
            "group": ["../../*"],
            "message": "Please use relative import"
          }
        ]
      }
    ],
    "@typescript-eslint/naming-convention": [
      "error",
      // {
      //   "selector": "variable",
      //   "modifiers": ["global"],
      //   "format": ["UPPER_CASE"]
      // },
      {
        "selector": "variable",
        "format": ["camelCase", "UPPER_CASE"]
      }
    ]
  }
}
